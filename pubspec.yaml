name: auto_mappr_workspace
publish_to: "none"

workspace:
  - packages/auto_mappr
  - packages/auto_mappr_annotation
  - packages/auto_mappr/example
  - packages/auto_mappr_annotation/example
  - examples/drift
  - examples/example
  - examples/freezed
  - examples/injectable
  - examples/json_serializable

environment:
  sdk: ^3.6.0

dev_dependencies:
  melos: ^7.0.0-dev.7

melos:
  scripts:
    # ANALYZING

    lint:all:
      run: melos run lint:dart && melos run lint:dcm
      description: Run all static analysis checks.

    lint:dart:
      run: melos exec -c 10 -- dart analyze --fatal-infos
      description: Run Dart static analysis checks.

    lint:dcm:
      run: melos exec -c 10 -- dcm analyze . --fatal-style --fatal-performance --fatal-warnings
      description: Run DCM static analysis checks.

    # GENERATION

    gen:build-all:
      run: melos run gen:example:build && melos run gen:test:build
      description: Generate everything.

    gen:example:
      run: melos exec -- dart run build_runner watch --delete-conflicting-outputs
      packageFilters:
        scope: "*example*"
      description: Generate example mappers.

    gen:example:build:
      run: melos exec -- dart run build_runner build --delete-conflicting-outputs --verbose
      packageFilters:
        scope: "*example*"

      description: Generate example mappers once.

    gen:test:
      run: melos exec -- dart run build_runner watch --delete-conflicting-outputs --verbose
      packageFilters:
        dirExists:
          - test
      description: Generate test mappers.

    gen:test:build:
      run: melos exec -- dart run build_runner build --delete-conflicting-outputs --verbose
      packageFilters:
        dirExists:
          - test
      description: Generate test mappers once.

    # TESTING

    test:
      run: melos exec -- dart test
      packageFilters:
        dirExists: test
      description: Run all Dart tests.
